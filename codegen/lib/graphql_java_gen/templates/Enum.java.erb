<%= render_license %>

package <%= package_name %>;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import poc.graphql.client.support.AbstractResponse;
import poc.graphql.client.support.Arguments;
import poc.graphql.client.support.Error;
import poc.graphql.client.support.AbstractQuery;
import poc.graphql.client.support.SchemaViolationError;
import poc.graphql.client.support.TopLevelResponse;
import poc.graphql.client.support.Input;
<% imports.each do |import| %>
  import <%= import %>;
<% end %>

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

    <% case type.kind when 'OBJECT', 'INTERFACE', 'UNION' %>
    <% when 'INPUT_OBJECT' %>
    <% when 'ENUM' %>
        <%= java_doc(type) %>
        public enum <%= type.name %> {
          <% enum_values = type.enum_values(include_deprecated: include_deprecated).sort_by{ |value| value.name } %>
          <% enum_values.each do |value| %>
            <%= java_doc(value) %>
            <%= value.deprecated? ? "@Deprecated\n" : '' -%>
            <%= value.upcase_name %>,
          <% end %>

          UNKNOWN_VALUE;

          public static <%= type.name %> fromGraphQl(String value) {
            if (value == null) {
              return null;
            }

            switch (value) {
              <% enum_values.each do |value| %>
                case "<%= value.name %>": {
                  return <%= value.upcase_name %>;
                }
              <% end %>
                default: {
                  return UNKNOWN_VALUE;
                }
            }
          }
          public String toString() {
            switch (this) {
              <% enum_values.each do |value| %>
                case <%= value.upcase_name %>: {
                  return "<%= value.name %>";
                }
              <% end %>
                default: {
                  return "";
                }
            }
          }
        }
    <% else %>
        <% raise NotImplementedError, "unhandled #{type.kind} type #{type.name}" %>
    <% end %>
