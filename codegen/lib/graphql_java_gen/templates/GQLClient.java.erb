<%= render_license %>

package <%= package_name %>;

import poc.graphql.client.support.SchemaViolationError;
import poc.graphql.client.GraphQLRequest;
import poc.graphql.client.impl.GraphQLClientImpl;
import poc.graphql.client.impl.GraphqlClientConfiguration;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.StandardCharsets;

public class GQLClient extends GraphQLClientImpl {
    private static final Logger LOGGER = LoggerFactory.getLogger(GQLClient.class);

    public GQLClient(GraphqlClientConfiguration configuration) throws Exception {
        super(configuration);
    }

    /**
     * Execute() with link to generated DTO.
     * @param query
     * @return
     * @throws SchemaViolationError
     */
    public QueryResponse execute(QueryQuery query) throws SchemaViolationError {
        LOGGER.debug("Executing GraphQL query: " + query.toString());

        GraphQLRequest request = new GraphQLRequest(query.toString());
        HttpResponse httpResponse;
        try {
            httpResponse = client.execute(buildRequest(request, null));
        } catch (Exception e) {
            throw new RuntimeException("Failed to send GraphQL request", e);
        }

        StatusLine statusLine = httpResponse.getStatusLine();
        if (HttpStatus.SC_OK == statusLine.getStatusCode()) {
            HttpEntity entity = httpResponse.getEntity();
            String json;
            try {
                json = EntityUtils.toString(entity, StandardCharsets.UTF_8);
            } catch (Exception e) {
                throw new RuntimeException("Failed to read HTTP response content", e);
            }

            QueryResponse response = QueryResponse.fromJson(json);

            // We log GraphQL errors because they might otherwise get "silently" unnoticed
            if (response.getErrors() != null) {
                LOGGER.warn("GraphQL request {} returned some errors {}", request.getQuery(), response.getErrors());
            }

            return response;
        } else {
            EntityUtils.consumeQuietly(httpResponse.getEntity());
            throw new RuntimeException("GraphQL query failed with response code " + statusLine.getStatusCode());
        }
    }
}