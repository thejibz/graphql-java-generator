<%= render_license %>

package <%= package_name %>;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import poc.graphql.client.support.AbstractResponse;
import poc.graphql.client.support.Arguments;
import poc.graphql.client.support.Error;
import poc.graphql.client.support.AbstractQuery;
import poc.graphql.client.support.SchemaViolationError;
import poc.graphql.client.support.TopLevelResponse;
import poc.graphql.client.support.Input;
<% imports.each do |import| %>
    import <%= import %>;
<% end %>

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class <%= response_type %>Response {
    private TopLevelResponse response;
    private <%= root_name %> data;

    public <%= response_type %>Response(TopLevelResponse response) throws SchemaViolationError {
        this.response = response;
        this.data = response.getData() != null ? new <%= root_name %>(response.getData()) : null;
    }

    public <%= root_name %> getData() {
        return data;
    }

    public List<Error> getErrors() {
        return response.getErrors();
    }

    public String toJson() {
        return new Gson().toJson(response);
    }

    public String prettyPrintJson() {
        final Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(response);
    }

    public static <%= response_type %>Response fromJson(String json) throws SchemaViolationError {
        final TopLevelResponse response = new Gson().fromJson(json, TopLevelResponse.class);
        return new <%= response_type %>Response(response);
    }
}